// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Context;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.BookDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<int>("BorrowedCopies")
                        .HasColumnType("int");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("Model.Entities.BookManagement", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LibrarianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ReturnLibrarianId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BookId", "LibrarianId");

                    b.HasIndex("BookId");

                    b.HasIndex("LibrarianId");

                    b.HasIndex("ReturnLibrarianId");

                    b.ToTable("BookManagement");
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("longtext")
                        .HasColumnName("AUTHOR");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasColumnType("longtext")
                        .HasColumnName("ISBN");

                    b.Property<string>("ITEM_TYPE")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PUBLISHED_DATE");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator<string>("ITEM_TYPE").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Model.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATE_OF_BIRTH");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.ToTable("PERSONS");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Entities.Biography", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("BIOGRAPHY");
                });

            modelBuilder.Entity("Model.Entities.Fantasy", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("FANTASY");
                });

            modelBuilder.Entity("Model.Entities.Mystery", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("MYSTERY");
                });

            modelBuilder.Entity("Model.Entities.NonFiction", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("NON_FICTION");
                });

            modelBuilder.Entity("Model.Entities.Novel", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("NOVEL");
                });

            modelBuilder.Entity("Model.Entities.ScienceFiction", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("SCIENCE_FICTION");
                });

            modelBuilder.Entity("Model.Entities.Textbook", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS");

                    b.HasDiscriminator().HasValue("TEXTBOOK");
                });

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.HasBaseType("Model.Entities.Person");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext");

                    b.ToTable("AUTHORS", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Customer", b =>
                {
                    b.HasBaseType("Model.Entities.Person");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime(6)");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Librarian", b =>
                {
                    b.HasBaseType("Model.Entities.Person");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("longtext");

                    b.ToTable("LIBRARIANS", (string)null);
                });

            modelBuilder.Entity("Model.Entities.BookDetails", b =>
                {
                    b.HasOne("Model.Entities.Item", "Book")
                        .WithOne("BookDetails")
                        .HasForeignKey("Model.Entities.BookDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.BookManagement", b =>
                {
                    b.HasOne("Model.Entities.Item", "Book")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Customer", "Customer")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Librarian", "LoanLibrarian")
                        .WithMany("LoanedBooks")
                        .HasForeignKey("LibrarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Librarian", "ReturnLibrarian")
                        .WithMany("ReturnedBooks")
                        .HasForeignKey("ReturnLibrarianId");

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("LoanLibrarian");

                    b.Navigation("ReturnLibrarian");
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.HasOne("Model.Entities.Author", "BookAuthor")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookAuthor");
                });

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.HasOne("Model.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Author", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Customer", b =>
                {
                    b.HasOne("Model.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Librarian", b =>
                {
                    b.HasOne("Model.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Librarian", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.Navigation("BookDetails");

                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Model.Entities.Customer", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("Model.Entities.Librarian", b =>
                {
                    b.Navigation("LoanedBooks");

                    b.Navigation("ReturnedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
